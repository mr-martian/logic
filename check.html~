<html>
  <head>
    <title>Proof-Checker</title>
    <meta charset="UTF-8" />
    <script src="lodash.js"></script>
    <style>
      .full {
        background: green;
      }
      .empty {
        background: gray;
      }
      .bad {
        background: pink;
      }
      .invalid {
        background: red;
      }
      .badrule {
        background: purple;
      }
    </style>
  </head>
  <body>
    <span>Number of Premises:</span>
    <input type="number" value="1" id="prem" onchange="addprem();"></input>
    <button onclick="update();">Check Proof</button>
    <span>Key:</span>
    <span class="full">Correct</span>
    <span class="empty">Empty</span>
    <span class="bad">Badly formed input</span>
    <span class="badrule">Badly formed rule</span>
    <span class="invalid">Invalid line</span>
    <div style="display: inline-block">
      <input type="radio" name="inputmode" id="uni" checked="checked"></input>
      <label for="uni">or: ∨ and: ∙ not: ~ implies: ⊃ biconditional: ≡</label>
      <br>
      <input type="radio" name="inputmode" id="asc" onchange="swapchars();"></input>
      <label for="asc">or: ^ and: & not: ~ implies: > biconditional: =</label>
    </div>
    <ol id="prems"></ol>
    <hr>
    <ol id="proof"></ol>
    <button onclick="makestate();">Add Statement</button>
    <button onclick="beginsubproof();">Add CP or IP</button>
    <button onclick="endsubproof();">End current CP or IP</button>
    <div id="qdiv">
      <textarea id="quick"></textarea>
      <button onclick="fromquick();">Parse</button>
    </div>
    <button onclick="showhide();">Show/Hide textbox</button>
    <script>
      var cor, cand, cnot, cthen, cbicond;
      var names = {};
      var swapchars = function() {
        if (document.getElementById('uni').checked) {
          cor = "∨"; cand = "∙"; cnot = "~"; cthen = "⊃"; cbicond = "≡";
        } else {
          cor = '^'; cand = '&'; cnot = '~'; cthen = '>'; cbicond = '=';
        }
        names = {};
        names[cand] = 'and'; names[cor] = 'or'; names[cthen] = 'implies'; names[cbicond] = 'bicond';
      };
      swapchars();
      var cexists = "∃";
      var statements = {};
      var ids = [null];
      var premisOL = document.getElementById('prems');
      var statementOL = document.getElementById('proof');
      var idnum = 0;
      var parsestatement = function(s) {
        var ret = {left: null, right: null, op: null};
        var path = ['left'];
        var cur = "";
        var c;
        for (var i = 0; i < s.length; i++) {
          c = s[i];
          switch (c) {
            case ' ':
              if (path[path.length-1] == 'left') {
                path.pop();
                path.push('op');
              } break;
            case cnot:
              _.set(ret, path, {left: 0, right: null, op: 'not'});
              path.push('right');
              break;
            case '{':
            case '[':
            case '(':
              _.set(ret, path, {left: null, right: null, op: null});
              path.push('left');
              break;
            case ')':
            case ']':
            case '}':
              if (path[path.length-1] != 'right') {
                return -1;
              } else {
                path.pop();
                if (path[path.length-1] == 'left') {
                  path.pop();
                  path.push('op');
                }
              }
              break;
            case cor:
            case cand:
            case cbicond:
            case cthen:
              if (path[path.length-1] == 'right') {
                //if it's set to right, that's a syntax error,
                //unless the last operator was "not"
                path.pop();
                path.push('op');
                if (_.result(ret, path) == 'not') {
                  path.pop();
                  i--;
                  break;
                } else {
                  return -1;
                }
              }
              if (path[path.length-1] == 'left') {
                path.pop();
                path.push('op');
              }
              _.set(ret, path, names[c]);
              path.pop();
              path.push('right');
              break;
            default:
              if (path[path.length-1] != 'op' && typeof(_.result(ret, path)) == 'string') {
                _.set(ret, path, (_.result(ret, path) || '') + c);
              } else if (path[path.length-1] != 'op' && _.result(ret, path) == null) {
                _.set(ret, path, c);
              } else {
                return -1;
              }
          }
        }
        return clean(ret);
      };
      var clean = function(s) {
        if (s.hasOwnProperty('right')) {
          if (s.op == null && s.right == null && s.left != null) {
            return clean(s.left);
          } else if (s.op != null && s.right != null && s.left != null) {
            var l = clean(s.left);
            var o = clean(s.op);
            var r = clean(s.right);
            if (l != -1 && o != -1 && r != -1) {
              return {left: l, op: o, right: r};
            } else {
              return -1;
            }
          } else {
            return -1;
          }
        } else {
          if (s == null) {
            return -1;
          } else {
            return s;
          }
        }
      };
      var rules1 = {
        Add: [
          {
            result: {left: {op: 'var', left: 0, right: 'x'}, op: 'or', right: {op: 'var', left: 0, right: 'y'}},
            form: {op: 'var', left: 0, right: 'x'},
            nest: false
          }
        ],
        Simp: [
          {
            form: {left: {op: 'var', left: 0, right: 'x'}, op: 'and', right: {op: 'var', left: 0, right: 'y'}},
            form: {op: 'var', left: 0, right: 'x'},
            nest: false
          }
        ],
      };
      var tovar = function(tr) {
        if (typeof(tr) == 'string') {
          return {left: 0, op: 'var', right: tr};
        } else if (tr.hasOwnProperty('left')) {
          return {left: tovar(tr.left), op: tr.op, right: tovar(tr.right)};
        } else {
          return tr;
        }
      };
      var makeequiv = function(rulename, stringlist, nest) {
        var l = [];
        var s1, s2;
        for (var i = 0; i < stringlist.length; i++) {
          s1 = tovar(parsestatement(stringlist[i][0]));
          s2 = tovar(parsestatement(stringlist[i][1]));
          l.push({form: s1, result: s2, nest: nest});
          l.push({form: s2, result: s1, nest: nest});
        }
        rules1[rulename] = l;
      };
      makeequiv('DN', [['~~x', 'x']], true);
      makeequiv('DM', [['~(p∙q)', '~p∨~q'], ['~(p∨q)', '~p∙~q']], true);
      makeequiv('Com', [['p∨q', 'q∨p'], ['p∙q', 'q∙p']], true);
      makeequiv('Assoc', [['p∨(q∨r)', '(p∨q)∨r'], ['p∙(q∙r)', '(p∙q)∙r']], true);
      makeequiv('Dist', [['p∨(q∙r)', '(p∨q)∙(p∨r)'], ['p∙(q∨r)', '(p∙q)∨(p∙r)']], true);
      makeequiv('Trans', [['p⊃q', '~q⊃~p']], true);
      makeequiv('Impl', [['p⊃q', '~p∨q']], true);
      makeequiv('Equiv', [['p≡q', '(p⊃q)∙(q⊃p)'], ['p≡q', '(p∙q)∨(~p∙~q)']], true);
      makeequiv('Exp', [['(p∙q)⊃r', 'p⊃(q⊃r)']], true);
      makeequiv('Taut', [['p', 'p∙p'], ['p', 'p∨p']], true);
      var rules2 = {
        MP: [
          {
            form1: {left: {op: 'var', left: 0, right: 'x'}, op: 'implies', right: {op: 'var', left: 0, right: 'y'}},
            form2: {op: 'var', left: 0, right: 'x'},
            result: {op: 'var', left: 0, right: 'y'}
          }
        ],
        MT: [
          {
            form1: {left: {op: 'var', left: 0, right: 'x'}, op: 'implies', right: {op: 'var', left: 0, right: 'y'}},
            form2: {left: 0, op: 'not', right: {op: 'var', left: 0, right: 'y'}},
            result: {left: 0, op: 'not', right: {op: 'var', left: 0, right: 'x'}}
          }
        ],
        HS: [
          {
            form1: {left: {op: 'var', left: 0, right: 'x'}, op: 'implies', right: {op: 'var', left: 0, right: 'y'}},
            form2: {left: {op: 'var', left: 0, right: 'y'}, op: 'implies', right: {op: 'var', left: 0, right: 'z'}},
            result: {left: {op: 'var', left: 0, right: 'x'}, op: 'implies', right: {op: 'var', left: 0, right: 'z'}}
          }
        ],
        DS: [
          {
            form1: {left: {op: 'var', left: 0, right: 'x'}, op: 'or', right: {op: 'var', left: 0, right: 'y'}},
            form2: {left: 0, op: 'not', right: {op: 'var', left: 0, right: 'x'}},
            result: {op: 'var', left: 0, right: 'y'}
          }
        ],
        CD: [
          {
            form1: {left: {left: {op: 'var', left: 0, right: 'x'}, op: 'implies', right: {op: 'var', left: 0, right: 'y'}},
                    op: 'and',
                    right: {left: {op: 'var', left: 0, right: 'z'}, op: 'implies', right: {op: 'var', left: 0, right: 'w'}}},
            form2: {left: {op: 'var', left: 0, right: 'x'}, op: 'or', right: {op: 'var', left: 0, right: 'z'}},
            result: {left: {op: 'var', left: 0, right: 'y'}, op: 'or', right: {op: 'var', left: 0, right: 'w'}}
          }
        ],
        Conj: [
          {
            form1: {left: 0, op: 'var', right: 'x'},
            form2: {left: 0, op: 'var', right: 'y'},
            result: {left: {left: 0, op: 'var', right: 'x'}, op: 'and', right: {left: 0, op: 'var', right: 'y'}}
          }
        ]
      };
      var fixnums = function() {
        //statementOL.setAttribute('start', premisOL.children.length + 1);
        var l = document.getElementsByTagName('li');
        for (var i = 0; i < l.length; i++) {
          l[i].value = ids.indexOf(l[i].id);
        }
      };
      var makeprem = function(value) {
        var n = document.createElement('li');
        n.innerHTML = '<input type="text"' + (value ? 'value="' + value + '"' : '') + '></input>';
        n.id = 'n' + idnum;
        premisOL.appendChild(n);
        idnum++;
      };
      var getlastOL = function(node) {
        if (node.lastChild && node.lastChild.tagName == 'OL') {
          return node.lastChild;
        } else {
          return node;
        }
      };
      var makestate = function(s, r, unindent) {
        var n = document.createElement('li');
        n.innerHTML = '<input type="text"' + (s ? 'value="'+s+'"' : '') + '></input><input type="text"' + (r ? 'value="'+r+'"' : '') + '></input>';
        n.id = 'n' + idnum;
        if (unindent) {
          getlastOL(statementOL).parentNode.appendChild(n);
        } else {
          getlastOL(statementOL).appendChild(n);
        }
        idnum++;
      };
      var indentcount = 0;
      var beginsubproof = function(s, r) {
        var el = document.createElement('ol');
        el.id = 'p' + indentcount;
        getlastOL(statementOL).appendChild(el);
        makestate(s, r, false);
        update();
      }
      var tostring = function(obj) {
        if (obj.hasOwnProperty('left')) {
          if (obj.op == 'not') {
            return cnot + tostring(obj.right);
          } else if (obj.op == 'var') {
            return obj.right;
          } else {
            var s = tostring(obj.left) + _.findKey(names, _.matches(obj.op)) + tostring(obj.right);
            var p1 = s[0];
            var p2 = s[s.length-1];
            if (p1 == '{' || p2 == '}') {
              return '(' + s + ')';
            } else if (p1 == '[' || p2 == ']') {
              return '{' + s + '}';
            } else if (p1 == '(' || p2 == ')') {
              return '[' + s + ']';
            } else {
              return '(' + s + ')';
            }
          }
        } else {
          return obj;
        }
      };
      var endsubproof = function() {
        update();
        var ol = getlastOL(statementOL);
        if (ol.id != 'proof') {
          var l1 = ol.firstChild.id;
          var l2 = ol.lastChild.id;
          if (statements[l1].from.rule == 'ACP') {
            makestate(tostring({left: statements[l1].value, op: 'implies', right: statements[l2].value}), ids.indexOf(l1) + '-' + ids.indexOf(l2) + ' CP', true);
          } else if (statements[l1].from.rule == 'AIP') {
            makestate(tostring({left: 0, op: 'not', right: statements[l1].value}), ids.indexOf(l1) + '-' + ids.indexOf(l2) + ' IP', true);
          }
        }
      };
      var addprem = function() {
        var n = premisOL.children.length - parseInt(document.getElementById('prem').value);
        while (n < 0) {
          makeprem();
          n++;
        }
        update();
        var em = document.getElementsByClassName('empty');
        var emct = 0;
        while (n > 0 && emct < em.length) {
          if (em[emct].parentNode) {
            em[emct].parentNode.removeChild(em[emct]);
            n--;
          }
          emct++;
        }
        document.getElementById('prem').value = parseInt(document.getElementById('prem').value) + n;
        fixnums();
      };
      var parserule = function(r, id, path) {
        if (r == 'ACP' || r == 'AIP') {
          var prev = statements[ids[ids.indexOf(id)-1]];
          console.log([r, id, prev, statements[id], statements]);
          if (_.isEqual(prev.path, path.slice(0,-1))) {
            return {rule: r, lines: []};
          } else {
            return -1;
          }
        }
        var m = r.match(/^\s*(\d+),?\s*([A-Za-z]+)\s*$/);
        if (m) {
          if (m[2] in rules1) {
            return {rule: m[2], lines: [ids[parseInt(m[1])]]};
          } else {
            return -1;
          }
        }
        m = r.match(/^\s*(\d+),\s*(\d+),?\s*([A-Za-z]+)\s*$/);
        if (m) {
          if (m[3] in rules2) {
            return {rule: m[3], lines: [ids[parseInt(m[1])], ids[parseInt(m[2])]]};
          } else {
            return -1;
          }
        }
        m = r.match(/^\s*(\d+)\s*-\s*(\d+),?\s*(CP|IP)\s*$/);
        if (m) {
          var s = parseInt(m[1]);
          var e = parseInt(m[2]);
          if (e <= s) {
            return -1;
          }
          if (e != ids.indexOf(id)-1) {
            return -1;
          }
          if (s > 1 && !_.isEqual(statements[ids[s]].path.slice(0,-1), statements[ids[s-1]].path)) {
            return -1;
          }
          console.log([statements, ids, s, e, ids[e], statements[ids[e]]]);
          if (!_.isEqual(statements[ids[e]].path.slice(0,-1), path)) {
            return -1;
          }
          return {rule: m[3], lines: [ids[s], ids[e]]};
        }
        return -1;
      };
      var updatestatements = function(ol, path) {
        var sv, rv, p, node, rule;
        var text = document.getElementById('quick');
        for (var i = 0; i < ol.children.length; i++) {
          node = ol.children[i];
          if (node.tagName == 'OL') {
            updatestatements(node, path.concat(node.id));
          } else {
            ids.push(node.id);
            sv = _.trim(node.children[0].value);
            rv = _.trim(node.children[1].value);
            text.value += sv + '\t' + rv + '\n';
            rule = parserule(rv, node.id, path);
            if (sv == '') {
              node.className = 'empty';
            } else if (rule == -1) {
              node.className = 'badrule';
            } else {
              p = parsestatement(sv);
              statements[node.id] = {value: p, from: rule, path: path};
              node.className = (p == -1 ? 'bad' : 'full');
            }
          }
        }
      };
      var matchpat = function(obj, pat, vars) {
        if (pat.op == 'var') {
          if (pat.right in vars) {
            if (!_.isEqual(obj, vars[pat.right])) {
              vars.ok = false;
            }
            return vars;
          }
          vars[pat.right] = obj;
          return vars;
        } else if (_.isEqual(obj, pat)) {
          return vars;
        } else {
          if (obj.hasOwnProperty('left') && pat.hasOwnProperty('left')) {
            vars = matchpat(obj.left, pat.left, vars);
            vars = matchpat(obj.op, pat.op, vars);
            vars = matchpat(obj.right, pat.right, vars);
            return vars;
          }
        }
        vars.ok = false;
        return vars;
      };
      var checkrule = function(inputs, output, forms, result, nested) {
        //nested indicates that a 1-line rule may be only partial, or that a 2-line rule is to be applied backwards.
        if (inputs.length == 2) {
          var vars = matchpat(inputs[0], forms[0], {ok: true});
          if (vars.ok) {
            vars = matchpat(inputs[1], forms[1], vars);
            if (vars.ok) {
              vars = matchpat(output, result, vars);
            }
          }
          if (!vars.ok && !nested) {
            return checkrule([inputs[1], inputs[0]], output, forms, result, true);
          }
          return vars.ok;
        } else { //just 1
          var vars = matchpat(inputs[0], forms[0], {ok: true});
          if (vars.ok) {
            vars = matchpat(output, result, vars);
          }
          if (!vars.ok && nested) {
            if (inputs[0].hasOwnProperty('left') && inputs[0].op == output.op) {
              var nes = checkrule([inputs[0].left], output.left, forms, result, nested);
              if (nes) {
                vars = matchpat(inputs[0].right, output.right, {ok: true});
                if (vars.ok) {
                  return true;
                }
              }
              nes = checkrule([inputs[0].right], output.right, forms, result, nested);
              if (nes) {
                vars = matchpat(inputs[0].left, output.left, {ok: true});
                if (vars.ok) {
                  return true;
                }
              }
            }
          }
          return vars.ok;
        }
      };
      var isokline = function(id) {
        var n = document.getElementById(id);
        return n && (n.className == 'full' || n.className == 'invalid')
      };
      var validate = function() {
        var node, s, vars, rule, id;
        for (var i = 1; i < ids.length; i++) {
          id = ids[i];
          node = document.getElementById(id);
          s = statements[id];
          if (node.className == 'full' && s.from != 'premis') {
            node.className = 'invalid';
            if (s.from.rule in rules1 && isokline(s.from.lines[0])) {
              rule = rules1[s.from.rule];
              for (var j = 0; j < rule.length; j++) {
                if (checkrule([statements[s.from.lines[0]].value], s.value, [rule[j].form], rule[j].result, rule[j].nest)) {
                  node.className = 'full';
                  break;
                }
              }
            } else if (s.from.rule == 'CP') {
              if (isokline(s.from.lines[0]) && isokline(s.from.lines[1])) {
                if (checkrule([statements[s.from.lines[0]].value, statements[s.from.lines[1]].value], s.value,
                              [tovar(parsestatement('x')), tovar(parsestatement('y'))], tovar(parsestatement('x' + cthen + 'y')))) {
                  node.className = 'full';
                }
              }
            } else if (s.from.rule == 'IP') {
              if (isokline(s.from.lines[0]) && isokline(s.from.lines[1])) {
                if (checkrule([statements[s.from.lines[0]].value, statements[s.from.lines[1]].value], s.value,
                              [tovar(parsestatement('x')), tovar(parsestatement('y' + cand + cnot + 'y'))], tovar(parsestatement(cnot + 'x')))) {
                  node.className = 'full';
                }
              }
            } else if (s.from.rule == 'ACP' || s.from.rule == 'AIP') {
              node.className = 'full';
            } else {
              if (isokline(s.from.lines[0]) && isokline(s.from.lines[1])) {
                rule = rules2[s.from.rule];
                for (var j = 0; j < rule.length; j++) {
                  if (checkrule([statements[s.from.lines[0]].value, statements[s.from.lines[1]].value], s.value, [rule[j].form1, rule[j].form2], rule[j].result, false)) {
                    node.className = 'full';
                    break;
                  }
                }
              }
            }
            //check this line
            //mark as invalid if either line referred to isn't .full or .invalid
          }
        }
      };
      var update = function() {
        ids = [null];
        var p;
        var v;
        var s;
        var text = document.getElementById('quick');
        text.value = '';
        for (var i = 0; i < premisOL.children.length; i++) {
          p = premisOL.children[i];
          v = _.trim(p.children[0].value);
          text.value += v + '\n';
          if (v == '') {
            p.className = 'empty';
            statements[p.id] = {value: -1, from: 'premis', path: ['main']};
          } else {
            s = parsestatement(v);
            if (s == -1) {
              p.className = 'bad';
              statements[p.id] = {value: -1, from: 'premis', path: ['main']};
            } else {
              p.className = 'full';
              statements[p.id] = {value: s, from: 'premis', path: ['main']};
            }
          }
          ids.push(p.id);
        }
        updatestatements(statementOL, ['main']);
        validate();
        fixnums();
      };
      var showhide = function() {
        var text = document.getElementById('qdiv');
        if (text.style.display != 'none') {
          text.style.display = 'none';
        } else {
          text.style.display = 'block';
        }
      };
      var fromquick = function() {
        var text = document.getElementById('quick').value.split('\n');
        var plist = [];
        var slist = [];
        for (var i = 0; i < text.length; i++) {
          if (_.trim(text[i]).length > 0) {
            var t = text[i].indexOf('\t');
            if (t != -1) {
              slist.push([text[i].slice(0,t), text[i].slice(t+1)]);
            } else {
              plist.push(text[i]);
            }
          }
        }
        document.getElementById('prem').value = plist.length;
        document.getElementById('prems').innerHTML = '';
        document.getElementById('proof').innerHTML = '';
        statements = {};
        for (var p = 0; p < plist.length; p++) {
          makeprem(plist[p]);
        }
        for (var s = 0; s < slist.length; s++) {
          if (slist[s][1].match('A[CI]P')) {
            beginsubproof(slist[s][0], slist[s][1]);
          } else if (slist[s][1].match('[CI]P')) {
            makestate(slist[s][0], slist[s][1], true);
          } else {
            makestate(slist[s][0], slist[s][1], false);
          }
        }
        //fixnums();
        update();
      };
      showhide();
      makeprem();
      //makestate();
      update();
    </script>
  </body>
</html>
